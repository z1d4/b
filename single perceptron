#multi perceptron
import tensorflow as tf
import numpy as np
from tensorflow import keras
import matplotlib.pyplot as plt
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
gray_scale = 255
x_train /= gray_scale
x_test /= gray_scale
print("Feature matrix:", x_train.shape)
print("Target matrix:", x_test.shape)
fig, ax = plt.subplots(10, 10)
k = 0
for i in range(10):
  for j in range(10):
    ax[i][j].imshow(x_train[k].reshape(28, 28),aspect='auto')
    k += 1
plt.show()

model=keras.models.Sequential()
model.add(keras.layers.Flatten(input_shape=[28,28]))
model.add(keras.layers.Dense(256,activation="sigmoid"))
model.add(keras.layers.Dense(128,activation="sigmoid"))
model.add(keras.layers.Dense(10,activation="sigmoid"))
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10, batch_size=2000, validation_split=0.2)

results = model.evaluate(x_test, y_test, verbose = 0)
print('test loss, test acc:', results)
