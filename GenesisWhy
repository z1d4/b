import hashlib
import datetime
class Block:
 def __init__(self, data, previous_hash):
  self.timestamp = datetime.datetime.now()
  self.data = data
  self.previous_hash = previous_hash
  self.hash = self.calculate_hash()
 def calculate_hash(self):
  block_contents = str(self.timestamp) + str(self.data) + str(self.previous_hash)
  block_hash = hashlib.sha256(block_contents.encode()).hexdigest()
  return block_hash
class Blockchain:
 def __init__(self):
  self.chain = [self.create_genesis_block()]
 def create_genesis_block(self):
  return Block("Genesis Block", "0")
 def add_block(self, data):
  previous_block = self.chain[-1]
  new_block = Block(data, previous_block.hash)
  self.chain.append(new_block)
 def print_blocks(self):
  for block in self.chain:
    print("Timestamp: ", block.timestamp)
    print("Data: ", block.data)
    print("Hash: ", block.hash)
    print("Previous Hash: ", block.previous_hash)
    print()
blockchain = Blockchain()
blockchain.print_blocks()
